name: Release API

on:
  push:
    branches: [main]
    paths:
      # the version number changes in version.txt
      # so only release if that file has changed
      - "src/version.txt"

env:
  WORKING_DIRECTORY: ./src
  IMAGE_REGISTRY: ${{ vars.REGISTRY_URL || 'ghcr.io' }}
  IMAGE_REPOSITORY: ${{ vars.REGISTRY_REPOSITORY || github.repository }}

jobs:
  build:
    # only build and push if this is not a pull request
    if: ${{ github.event_name != 'pull_request' }}
    name: Create new Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        id: setup
        run: |
          IMAGE_VERSION=$(cat ./src/version.txt) && echo "version=$IMAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: ./global.json

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ vars.REGISTRY_USERNAME || github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

      - name: Publish API
        working-directory: ${{ env.WORKING_DIRECTORY}}/Microsoft.Developer.Api
        run: dotnet publish --os linux --arch x64 -c Release -p:PublishProfile=DefaultContainer -p:Version="${{ steps.setup.outputs.version }}"

      - name: Create Release
        uses: actions/github-script@v6
        with:
          script: |
            const releaseResult = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.setup.outputs.version }}',
              name: 'v${{ steps.setup.outputs.version }}',
              prerelease: true,
              body: 'prerelease'
            });

            const release = releaseResult.data;
